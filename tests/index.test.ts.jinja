import { handler } from '../src/index';
import { APIGatewayProxyEvent, Context } from 'aws-lambda';

// Mock context
const mockContext: Context = {
  callbackWaitsForEmptyEventLoop: false,
  functionName: '{{ service_name }}',
  functionVersion: '$LATEST',
  invokedFunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:{{ service_name }}',
  memoryLimitInMB: '{{ lambda_memory }}',
  awsRequestId: 'test-request-id',
  logGroupName: '/aws/lambda/{{ service_name }}',
  logStreamName: 'test-stream',
  getRemainingTimeInMillis: () => 30000,
  done: () => {},
  fail: () => {},
  succeed: () => {},
};

describe('{{ service_name }} Lambda Handler', () => {
  test('should handle GET request', async () => {
    const event: APIGatewayProxyEvent = {
      httpMethod: 'GET',
      path: '{{ api_path }}',
      pathParameters: null,
      queryStringParameters: null,
      headers: {},
      multiValueHeaders: {},
      body: null,
      isBase64Encoded: false,
      requestContext: {
        accountId: '123456789012',
        apiId: 'test-api',
        httpMethod: 'GET',
        requestId: 'test-request',
        resourceId: 'test-resource',
        resourcePath: '{{ api_path }}',
        stage: 'test',
        identity: {
          sourceIp: '127.0.0.1',
          userAgent: 'test-agent',
        } as any,
      } as any,
      resource: '{{ api_path }}',
      stageVariables: null,
      multiValueQueryStringParameters: null,
    };

    const result = await handler(event, mockContext);

    expect(result.statusCode).toBe(200);
    expect(result.headers).toBeDefined();
    expect(result.headers!['Content-Type']).toBe('application/json');
    
    const body = JSON.parse(result.body);
    expect(body.message).toBe('Hello from {{ service_name }}!');
    expect(body.service).toBe('{{ service_name }}');
    expect(body.method).toBe('GET');
  });

  test('should handle POST request', async () => {
    const event: APIGatewayProxyEvent = {
      httpMethod: 'POST',
      path: '{{ api_path }}',
      pathParameters: null,
      queryStringParameters: null,
      headers: {},
      multiValueHeaders: {},
      body: JSON.stringify({ test: 'data' }),
      isBase64Encoded: false,
      requestContext: {
        accountId: '123456789012',
        apiId: 'test-api',
        httpMethod: 'POST',
        requestId: 'test-request',
        resourceId: 'test-resource',
        resourcePath: '{{ api_path }}',
        stage: 'test',
        identity: {
          sourceIp: '127.0.0.1',
          userAgent: 'test-agent',
        } as any,
      } as any,
      resource: '{{ api_path }}',
      stageVariables: null,
      multiValueQueryStringParameters: null,
    };

    const result = await handler(event, mockContext);

    expect(result.statusCode).toBe(201);
    
    const body = JSON.parse(result.body);
    expect(body.message).toBe('Resource created');
    expect(body.service).toBe('{{ service_name }}');
    expect(body.method).toBe('POST');
    expect(body.data).toEqual({ test: 'data' });
  });

  test('should handle unsupported method', async () => {
    const event: APIGatewayProxyEvent = {
      httpMethod: 'PATCH',
      path: '{{ api_path }}',
      pathParameters: null,
      queryStringParameters: null,
      headers: {},
      multiValueHeaders: {},
      body: null,
      isBase64Encoded: false,
      requestContext: {
        accountId: '123456789012',
        apiId: 'test-api',
        httpMethod: 'PATCH',
        requestId: 'test-request',
        resourceId: 'test-resource',
        resourcePath: '{{ api_path }}',
        stage: 'test',
        identity: {
          sourceIp: '127.0.0.1',
          userAgent: 'test-agent',
        } as any,
      } as any,
      resource: '{{ api_path }}',
      stageVariables: null,
      multiValueQueryStringParameters: null,
    };

    const result = await handler(event, mockContext);

    expect(result.statusCode).toBe(405);
    
    const body = JSON.parse(result.body);
    expect(body.error).toBe('Method not allowed');
  });
});
